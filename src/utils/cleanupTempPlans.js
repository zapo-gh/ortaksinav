import db from '../database/database';
import logger from './logger';

/**
 * Ge√ßici drag & drop kayƒ±tlarƒ±nƒ± temizle
 */
export const cleanupTempPlans = async () => {
  try {
    console.log('üßπ Ge√ßici planlar temizleniyor...');
    
    // T√ºm planlarƒ± al
    const allPlans = await db.getAllPlans();
    console.log('üìã T√ºm planlar alƒ±ndƒ±:', allPlans.length);
    
    // Ge√ßici planlarƒ± filtrele
    const tempPlans = allPlans.filter(plan => {
      // plan.id'yi string'e √ßevir
      const planId = String(plan.id || '');
      const planName = String(plan.name || '');
      
      const isTemp = planName.includes('Ge√ßici Plan') || planId.startsWith('temp_');
      console.log(`üîç Plan kontrol√º: ${planId} - ${planName} - Ge√ßici: ${isTemp}`);
      return isTemp;
    });
    
    console.log(`üìä ${tempPlans.length} ge√ßici plan bulundu`);
    
    // En son ge√ßici planƒ± hari√ß tut, diƒüerlerini sil
    if (tempPlans.length > 1) {
      // Tarihe g√∂re sƒ±rala (en yeni en son)
      const sortedTempPlans = tempPlans.sort((a, b) => {
        const dateA = new Date(a.date || a.createdAt || 0);
        const dateB = new Date(b.date || b.createdAt || 0);
        return dateB - dateA;
      });
      
      // En son ge√ßici planƒ± koru, diƒüerlerini sil
      const plansToDelete = sortedTempPlans.slice(1);
      
      console.log(`üóëÔ∏è ${plansToDelete.length} plan silinecek`);
      
      for (const plan of plansToDelete) {
        try {
          await db.deletePlan(plan.id);
          console.log(`‚úÖ Ge√ßici plan silindi: ${plan.id}`);
        } catch (deleteError) {
          console.error(`‚ùå Plan silme hatasƒ± (${plan.id}):`, deleteError);
          // Tek plan silme hatasƒ± t√ºm i≈ülemi durdurmasƒ±n
        }
      }
      
      console.log(`‚úÖ ${plansToDelete.length} ge√ßici plan temizlendi`);
    } else if (tempPlans.length === 1) {
      console.log('‚ÑπÔ∏è Sadece 1 ge√ßici plan var, temizleme gerekmiyor');
    } else {
      console.log('‚ÑπÔ∏è Temizlenecek ge√ßici plan bulunamadƒ±');
    }
    
    return {
      success: true,
      deletedCount: tempPlans.length > 1 ? tempPlans.length - 1 : 0,
      keptCount: tempPlans.length > 0 ? 1 : 0
    };
    
  } catch (error) {
    console.error('‚ùå Ge√ßici planlar temizlenirken hata:', error);
    logger.error('‚ùå Ge√ßici planlar temizlenirken hata:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

/**
 * Ge√ßici plan olu≈üturma stratejisini deƒüi≈ütir
 * Mevcut ge√ßici planƒ± g√ºncelle, yeni kayƒ±t olu≈üturma
 */
export const updateTempPlan = async (planData) => {
  try {
    // Mevcut ge√ßici planƒ± bul
    const allPlans = await db.getAllPlans();
    const existingTempPlan = allPlans.find(plan => {
      const planId = String(plan.id || '');
      const planName = String(plan.name || '');
      return planName.includes('Ge√ßici Plan') || planId.startsWith('temp_');
    });
    
    if (existingTempPlan) {
      // Mevcut ge√ßici planƒ± g√ºncelle
      const updatedPlan = {
        ...existingTempPlan,
        data: planData,
        date: new Date().toISOString(),
        totalStudents: planData.salon?.ogrenciler?.length || 0,
        salonCount: planData.tumSalonlar?.length || 1
      };
      
      await db.savePlan(updatedPlan);
      console.log('üîÑ Mevcut ge√ßici plan g√ºncellendi');
      return updatedPlan;
    } else {
      // Yeni ge√ßici plan olu≈ütur
      const newTempPlan = {
        id: `temp_${Date.now()}`,
        name: 'Ge√ßici Plan (Drag & Drop)',
        data: planData,
        date: new Date().toISOString(),
        totalStudents: planData.salon?.ogrenciler?.length || 0,
        salonCount: planData.tumSalonlar?.length || 1
      };
      
      await db.savePlan(newTempPlan);
      console.log('‚ú® Yeni ge√ßici plan olu≈üturuldu');
      return newTempPlan;
    }
  } catch (error) {
    logger.error('‚ùå Ge√ßici plan g√ºncellenirken hata:', error);
    throw error;
  }
};

